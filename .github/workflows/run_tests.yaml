name: Markdown Rundoc Testsuite

on:
  workflow_dispatch:
    inputs:
      ocpAPI:
        description: 'OpenShift API endpoint (e.g. oc whoami --show-server)'
        required: true
      ocpToken:
        description: 'OpenShift Token (e.g. oc whoami --show-token)'
        required: true
jobs:
  test:
    runs-on: ubuntu-latest
    steps:

      - name: Add mask
        run: |
          echo "::add-mask::${{ github.event.inputs.ocpToken }}"
          echo "::add-mask::${{ github.event.inputs.ocpAPI }}"

      - name: Install OpenShift CLI
        uses: redhat-actions/oc-installer@v1

      - name: Authenticate with OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ github.event.inputs.ocpAPI }}
          openshift_token: ${{ github.event.inputs.ocpToken }}
          insecure_skip_tls_verify: true

      - name: Run testsuite
        shell: bash
        run: |
          repo=${{ github.repository }}
          oc new-project ${repo##*/}-test || true
          podname=test-$(date +"%Y-%m-%d-%H-%M-%S")
          oc -n ${repo##*/}-test run $podname --image=quay.io/eformat/tech-exercise-test:latest \
            --env="CLUSTER_DOMAIN=${{ secrets.CLUSTER_DOMAIN }}" \
            --env="GIT_SERVER=${{ secrets.GIT_SERVER }}" \
            --env="TEAM_NAME=${{ secrets.TEAM_NAME }}" \
            --env="GITLAB_USER=${{ secrets.GITLAB_USER }}" \
            --env="GITLAB_PASSWORD=${{ secrets.GITLAB_PASSWORD }}" \
            --env="OCP_USER=${{ secrets.OCP_USER }}" \
            --env="OCP_PASSWORD=${{ secrets.OCP_PASSWORD }}" \
            --restart=Never

          while test 0 == $(oc -n ${repo##*/}-test get pod -l run=$podname -o name 2>/dev/null | wc -l); do sleep 5; done
          oc -n ${repo##*/}-test wait pod -l run=$podname --for=condition=Ready --timeout=60s

          podphase=$(oc -n ${repo##*/}-test get pods -l run=$podname -o jsonpath='{.items[*].status.phase}')
          while [ "$podphase" != "Failed" -a "$podphase" != "Succeeded" ]; do
              echo "$podname phase $podphase ..."
              sleep 5
              podphase=$(oc -n ${repo##*/}-test get pods -l run=$podname -o jsonpath='{.items[*].status.phase}')
          done

          if [ "podphase" != "Succeeded" ]; then
              echo "ðŸ›‘ test failed, exiting ðŸ›‘";
              exit 1;
          fi
          echo "ðŸ¦• tests ran OK ðŸ¦•";
